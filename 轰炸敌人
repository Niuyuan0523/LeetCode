想象一下炸弹人游戏，在你面前有一个二维的网格来表示地图，网格中的格子分别被以下三种符号占据：

'W' 表示一堵墙
'E' 表示一个敌人
'0'（数字 0）表示一个空位


请你计算一个炸弹最多能炸多少敌人。

由于炸弹的威力不足以穿透墙体，炸弹只能炸到同一行和同一列没被墙体挡住的敌人。

注意：你只能把炸弹放在一个空的格子里

示例:

输入: [["0","E","0","0"],["E","0","W","E"],["0","E","0","0"]]
输出: 3 
解释: 对于如下网格

0 E 0 0 
E 0 W E 
0 E 0 0

假如在位置 (1,1) 放置炸弹的话，可以炸到 3 个敌人


解题思路
  和官方的暴力优化差不多，大致都是以当前点为原点，分上下左右方向进行累计求和，4个数组的含义即是当前点4方向上的人数。

代码
javascript

/**
 * @param {character[][]} grid
 * @return {number}
 */
var maxKilledEnemies = function(grid) {
    let max = 0,
        up = Array.from(new Array(grid.length), ()=> new Array(grid[0].length).fill(0)),
        down = Array.from(new Array(grid.length), ()=> new Array(grid[0].length).fill(0)),
        left = Array.from(new Array(grid.length), ()=> new Array(grid[0].length).fill(0)),
        right = Array.from(new Array(grid.length), ()=> new Array(grid[0].length).fill(0));
    for(let i = 0; i < grid.length; i++){
        for(let j = 0; j < grid[0].length; j++){
            if(grid[i][j] == 'W'){
                up[i][j] = left[i][j] = 0;
            }else if(grid[i][j] == 'E'){
                if(i > 0) up[i][j] = up[i - 1][j] + 1;
                else up[i][j] = 1;
                if(j > 0) left[i][j] = left[i][j - 1] + 1;
                else left[i][j] = 1;
            }else{
                if(i > 0) up[i][j] = up[i - 1][j];
                if(j > 0) left[i][j] = left[i][j - 1];
            }
        }
    }
    for(let i = grid.length - 1; i >= 0; i--){
        for(let j = grid[0].length - 1; j >= 0; j--){
            if(grid[i][j] == 'W'){
                down[i][j] = right[i][j] = 0;
            }else if(grid[i][j] == 'E'){
                if(i < grid.length - 1) down[i][j] = down[i + 1][j] + 1;
                else down[i][j] = 1;
                if(j < grid[0].length - 1) right[i][j] = right[i][j + 1] + 1;
                else right[i][j] = 1;
            }else{
                if(i < grid.length - 1) down[i][j] = down[i + 1][j];
                if(j < grid[0].length - 1) right[i][j] = right[i][j + 1];
            }
        }
    }
    for(let i = 0; i < grid.length; i++){
        for(let j = 0; j < grid[0].length; j++){
            if(grid[i][j] == 0){
                max = Math.max(max, up[i][j] + down[i][j] + left[i][j] + right[i][j]);
            }
        }
    }
    return max;
}
